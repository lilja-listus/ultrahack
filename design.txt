Design


 - Travel notice submisison flow

 () User selects destination, start and end dates/times, and friends to share
    with
    () list of friends to share with is returned by call to sharing_targets
       endpoint

 () User clicks "submit"

 () new_travel_notice endpoint is called


 - Login flow

**Let's not focus on auth other than to build a very simple login page. We can
make sure we're doing things securely later. **

 () User puts email and credential into fields

 () login endpoint is called


 - New User flow

 () User puts email, name, password, and home location into fields
    () Be sure to validate email address in front end
    () Should be hashing passwords. 

 () new_user endpoint is called



 - Account Matching Logic

When a new travel notice arrives, it will need to be compared to the user's
existing schedule:

Do we ban users from submitting travel notices to their own location?

 () Let current user be "user" and user who sent travel notice be "friend"

 () Fetch all of user's travel notices with a start date greater than friend's
    end date and end date less than friend's start date. If this is a
    non-empty set, determine precise dates of overlap and non-overlap, and
    send notifications if user and friend will be in the same place at the
    same time. 

 () Ignore notice from friend if there is no overlap, and notice is not for
    user's home location. Otherwise, send notification to user. If user's
    location at that time will be their home location, or their planned
    location was added via a travel notice shared with friend, then send an
    email to friend as well. 

 () Submitted travel notices are sent off to each user who they are meant to be
    shared with, with no additional filtering. 


 - Database

 () (Table of friends?: userID X userID) (Only if we have time; same with
    friend lists)

 () Table of users: userID, username and/or name, email, password, home, ???

 () Table of travel plans: planID, userID, destination, start time
    () We don't need end times --- just add another row for the trip home.
       There will be end times in the actual notifications, just not in DB.

 () Visibility table: planID X userID (i.e. plan123 X kechpaja = kechpaja knows
    about plan123)


 - Endpoints

 (x) new_travel_notice - requires a POST request. 
    data object: {
                     "destination" : <location ID>,
                     "start" : <datetime>,
                     "end" : <datetime>,
                     "audience" : [
                         <user ID>,
                         ...
                     ]
                 }

 (x) user_info/$userID - GET request
    returns JSON object: {
                             "id" : <user ID>,
                             "name" : <string>,
                             "home" : {
                                 "id" : <location ID>,
                                 "name" : "Some City or Town"
                             }
                         }

 () sharing_targets
    If a search string is included, only friends whose names match that string
    will be returned. 
    data object: {
                     "searchString" : <string> // Can be null, undefined, or empty
                 }
    returns JSON object: {
                             "users" : [
                                 {
                                     "name" : <string>,
                                     "id" : <user ID>,
                                     "home" : {
                                         "id" : <location ID>,
                                         "name" : "City or town"
                                     }
                                 }
                             ],
                             "lists" : [ <list ID>, ... ] // Don't use this yet
                         }
    To avoid overtaxing the network, this returns only the first N results, for
    a fairly small N (100?). But it will still be enough to require scrolling
    the returned list. 

 () locations - GET
    For now, this just returns a prepackaged list of cities. Later on, we can
    think about supporting arbitrary coordinates, or allowing users to define
    their own important destinations to be shared with their friends. 
    returns JSON object: [
                             { "id" : <location ID>, "name" : "Some city" },
                             ....
                         ]

 () login
    This endpoint sets an HTTP only cookie.
    TODO: internal structure. Must send both username/email and credential. 
    TODO: should we use cierge?
    You get something back, but token won't be accessible from JS. That is by
    design.

 () new_user - POST
    data object: {
                     "name" : <string>,
                     "email" : <string>,
                     "password" : <string>,
                     "home" : <location ID>
                 }

 () new_user_list - POST
    data object: {
                     "name" : <string>,
                     "users" : [ <user ID>, ... ]
                 }


 - Future

 () Automatically send notification canceling travel notice when user adds a
    new notice contradicting their existing plans, or cancels a notice they
    posted? Probably don't need any special infrastructure for this; just send
    a notice for the new location?

 () Currently a user's home location is public to all other users of the
    service. That should change. Should allow user to add people to follow, and
    also people who they permit to see their home location. 
